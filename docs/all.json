{"shell":true,"revision":"2022feb658fb7855110fec7ccf3e48937308af2b","objects":[{"type":null,"source":"lib/akd.ex:2","object_type":"ModuleObject","moduledoc":"A framework that makes elixir deployments a breeze. It's highly configurable,\nyet easy to set up.\n\n\n## Example Configuration (dev.exs)(Optional):\n\n\n## Example Configuration (test.exs)(Optional):\n\n\n","module":"Elixir.Akd","id":"Akd"},{"type":null,"source":"lib/akd/base/build/distillery.ex:2","object_type":"ModuleObject","moduledoc":"A native Hook module that comes shipped with Akd.\n\nThis module uses `Akd.Hook`.\n\nProvides a set of operations that build a distillery release for a given app\nat a deployment's `build_at` destination. This hook assumes that a distillery\nrel config file, `rel/config.exs` is already present or initialized by either\na previously executed hook or manually.\n\nEnsures to cleanup and empty the releases created by this build.\n\nDoesn't have any Rollback operations.\n\n# Options:\n\n* run_ensure: boolean. Specifies whether to a run a command or not.\n* ignore_failure: boolean. Specifies whether to continue if this hook fails.\n* cmd_env: list of tuples. Specifies the environments to provide while\n      building the distillery release.\n\n# Defaults:\n\n* `run_ensure`: `true`\n* `ignore_failure`: `false`\n\n","module":"Elixir.Akd.Build.Distillery","id":"Akd.Build.Distillery"},{"type":null,"source":"lib/akd/base/build/docker.ex:2","object_type":"ModuleObject","moduledoc":"This module is a work in progress ..\n","module":"Elixir.Akd.Build.Docker","id":"Akd.Build.Docker"},{"type":null,"source":"lib/akd/phx/brunch.ex:2","object_type":"ModuleObject","moduledoc":"A native Hook module that comes shipped with Akd.\n\nThis module uses `Akd.Hook`.\n\nProvides a set of operations that build a brunch release for a given phoenix app\nat a deployment's `build_at` destination. This hook assumes that an executable\nbrunch binary file is already present or initialized by either\na previously executed hook or manually.\n\nEnsures to cleanup and empty the deps folder created by this build.\n\nDoesn't have any Rollback operations.\n\n# Options:\n\n* run_ensure: boolean. Specifies whether to a run a command or not.\n* ignore_failure: boolean. Specifies whether to continue if this hook fails.\n* brunch: string. Path to brunch executable from project's root.\n* brunch_config: string. Path to brunch config from project's root.\n* cmd_env: list of tuples. Specifies the environments to provide while\n      building the distillery release.\n\n# Defaults:\n\n* `run_ensure`: `true`\n* `ignore_failure`: `false`\n* `brunch`: \"node_modules/brunch/bin/brunch\"\n* `brunch_config`: \".\"\n","module":"Elixir.Akd.Build.Phoenix.Brunch","id":"Akd.Build.Phoenix.Brunch"},{"type":null,"source":"lib/akd/phx/npm.ex:2","object_type":"ModuleObject","moduledoc":"A native Hook module that comes shipped with Akd.\n\nThis module uses `Akd.Hook`.\n\nProvides a set of operations that build a npm release for a given phoenix app\nat a deployment's `build_at` destination. This hook assumes that a package.json\nis present.\n\nEnsures to cleanup and remove node_modules folder created by this build.\n\nDoesn't have any Rollback operations.\n\n# Options:\n\n* run_ensure: boolean. Specifies whether to a run a command or not.\n* ignore_failure: boolean. Specifies whether to continue if this hook fails.\n* cmd_env: list of tuples. Specifies the environments to provide while\n      building the distillery release.\n* package_path: string. Path to package.json\n\n# Defaults:\n\n* `run_ensure`: `true`\n* `ignore_failure`: `false`\n* `package_path`: \".\"\n","module":"Elixir.Akd.Build.Phoenix.Npm","id":"Akd.Build.Phoenix.Npm"},{"type":null,"source":"lib/akd/helpers/deploy_helper.ex:2","object_type":"ModuleObject","moduledoc":"This module defines helper functions used to initialize a deployment\nand add hooks to a deployment, and execute it.\n","module":"Elixir.Akd.DeployHelper","id":"Akd.DeployHelper"},{"type":null,"source":"lib/akd/deployment.ex:2","object_type":"ModuleObject","moduledoc":"This module represents a `Deployment` struct which contains metadata about\na deployment.\n\nThe meta data involves:\n\n* build_at - `Akd.Destination.t` where the app/node will be built/released.\n* mix_env - Mix environment to build the app, represented by a `String.t`.\n* name - Name with which the app/node will be published.\n* publish_to - `Akd.Destination.t` where to app/node will be published.\n* vsn - Version of app that is being released, represented by a `String.t`.\n* hooks - A list of `Akd.Hook.t` that will be run in order when a deployment\n          is executed.\n\nThis struct is mainly used by native hooks in `Akd`, but it can be leveraged\nto produce custom hooks.\n","module":"Elixir.Akd.Deployment","id":"Akd.Deployment"},{"type":null,"source":"lib/akd/destination.ex:2","object_type":"ModuleObject","moduledoc":"This module represents a `Destination` struct which contains metadata about\na destination/location/host.\n\nThe meta data involves:\n\n* user - Represents the user who will be accessing a host/server.\n         Expects a string, defaults to `:current`.\n* host - Represents the host/server being accessed.\n         Expects a string, defaults to `:local`.\n* path - Represents the path on the server being accessed.\n         Expects a string, defaults to `.` (current directory).\n\nExample:\n  Accessing `root@x.x.x.x:/path/to/dir\" would have\n  user: `\"root\"`\n  host: `\"x.x.x.x\"`\n  path: `\"/path/to/dir/\"`\n\nThis struct is mainly used by native hooks in `Akd`, but it can be leveraged\nto produce custom hooks.\n","module":"Elixir.Akd.Destination","id":"Akd.Destination"},{"type":null,"source":"lib/akd/helpers/destination_resolver.ex:2","object_type":"ModuleObject","moduledoc":"This module defines helper functions which can be used to resolve\na destination for based on deployment and the destination type\n","module":"Elixir.Akd.DestinationResolver","id":"Akd.DestinationResolver"},{"type":null,"source":"lib/akd/dsl/form_hook.ex:2","object_type":"ModuleObject","moduledoc":"Defines a Hook.\n\nThis modules provides a DSL to define hooks `Akd.Hook.t` structs in a\nreadable and organized manner.\n\nThis module provides a set of macros for generating hooks using operations\nspecified by `main`, `ensure` and `rollback` macros.\n\n## Form Hook and Operations\n\nOnce form_hook is called, it is goes through all the operations defined inside\nthe `do - end` block, using `main`, `ensure` and `rollback` macros, with their\nspecific options. Once the block ends, it resolves all those operations into\na `Akd.Hook.t` struct and returns that.\n\nOnce this hook is defined it can be used in a pipeline or a `Akd.Hook` module\nthat returns a hook\n\n## For Example:\n\nUse within an `Akd.Hook` module\n```\ndefmodule DeployApp.CustomHook.Hook do\n  use Akd.Hook\n\n  def get_hooks(deployment, opts // []) do\n    my_hook = form_hook opts do\n      main \"run this\", deployment.build_at\n      main \"run this too\", deployment.publish_to\n\n      ensure \"ensure this command runs\", deployment.build_at\n\n      rollback \"call this only if the hook fails\", deployment.publish_to\n    end\n\n    [my_hook]\n  end\nend\n```\n\nPlease refer to `Nomenclature` for more information about the terms used.\n","module":"Elixir.Akd.Dsl.FormHook","id":"Akd.Dsl.FormHook"},{"type":null,"source":"lib/akd/dsl/pipeline.ex:2","object_type":"ModuleObject","moduledoc":"Defines an Akd Pipeline.\n\nThis modules provides a DSL to interact with Akd in a readable and simple\nmanner.\n\nThe module provides a set of macros for generating hooks that could either\nbe dispatched to a hook module (native or custom created) or a set of\noperations.\n\n## Pipelines and Hooks\n\nOnce a deployment is initiated, it is goes through several steps and operations\nwhich perform tasks like building and publishing a release, while transforming\nthe deployment struct, eventually executing the deployment (and operations\nin the order that they were added to the pipeline).\n\nEach of the operations can be added in form of `Akd.Hook`s.\n\nOnce a pipeline is defined, a deployment/other pipeline can be piped-through\nit.\n\n## For Example:\n\n```\ndefmodule DeployApp.Pipeline do\n  import Akd.Dsl.Pipeline\n\n  pipeline :build do\n    hook SomeModule\n    hook SomeOtherModule\n  end\n\n  pipeline :publish do\n    hook PublishModule\n  end\n\n  pipeline :deploy do\n    pipe_through :build\n    pipe_through :publish\n    hook SomeCleanupModule\n  end\nend\n```\n\nPlease refer to `Nomenclature` for more information about the terms used.\n","module":"Elixir.Akd.Dsl.Pipeline","id":"Akd.Dsl.Pipeline"},{"type":null,"source":"lib/akd/base/fetch/git.ex:2","object_type":"ModuleObject","moduledoc":"A native Hook module that comes shipped with Akd.\n\nThis module uses `Akd.Hook`.\n\nProvides a set of operations that fetch source code using `git` to a destination,\ncheck out a given branch (defaults to `master`) and pull the latest version\nof the branch on the destination.\n\nEnsures to cleanup and empty the desination directory. (Doesn't run this by\ndefault)\n\nDoesn't have any Rollback operations.\n\n# Options:\n\n* run_ensure: boolean. Specifies whether to a run a command or not.\n* ignore_failure: boolean. Specifies whether to continue if this hook fails.\n* src: string. Source/Repo from where to clone the project. This is a required\n    option while using this hook.\n* branch: string. Branch of the git repo that is being deployed.\n\n# Defaults:\n\n* `run_ensure`: `false`\n* `ignore_failure`: `false`\n* `src`: \".\"\n* `branch`: `master`\n\n","module":"Elixir.Akd.Fetch.Git","id":"Akd.Fetch.Git"},{"type":null,"source":"lib/akd/base/fetch/scp.ex:2","object_type":"ModuleObject","moduledoc":"A native Hook module that comes shipped with Akd.\n\nThis module uses `Akd.Hook`.\n\nProvides a set of operations that fetch source code using `scp` from a given\nsource to a destination.\n\nEnsures to cleanup and empty the desination directory. (Doesn't run this by\ndefault)\n\nDoesn't have any Rollback operations.\n\n# Options:\n\n* run_ensure: boolean. Specifies whether to a run a command or not.\n* ignore_failure: boolean. Specifies whether to continue if this hook fails.\n* src: string. Source of the code from where to scp the data.\n* exclude: list. Scp all folders except the ones given in exclude.\n\n# Defaults:\n\n* `run_ensure`: `false`\n* `ignore_failure`: `false`\n* `src`: Current working directory, `.`\n* `exclude`: `[\"_build\", \".git\", \"deps\", \".gitignore\"]`\n\n","module":"Elixir.Akd.Fetch.Scp","id":"Akd.Fetch.Scp"},{"type":null,"source":"lib/akd/generator/hook.ex:2","object_type":"ModuleObject","moduledoc":"This module handles the generation of custom hooks which use `Akd.Hook`.\nThis can either directly be called, or called through a mix task,\n`mix akd.gen.hook`.\n\nThis class uses EEx and Mix.Generator to fetch file contents from an eex\ntemplate and populate the interpolated fields, writing it to the speficied\nfile.\n\n## Usage:\n\nThe following call creates a file `hook.ex` at location `path/to/file/hook.ex`\n\n```\nAkd.Generator.Hook.gen([\"hook.ex\"], path: \"path/to/file\")\n```\n\n","module":"Elixir.Akd.Generator.Hook","id":"Akd.Generator.Hook"},{"type":null,"source":"lib/akd/generator/task.ex:2","object_type":"ModuleObject","moduledoc":"This module handles the generation of a custom task which use `Akd.Task`.\nThis can either directly be called, or called through a mix task,\n`mix akd.gen.task`.\n\nThis class uses EEx and Mix.Generator to fetch file contents from an eex\ntemplate and populate the interpolated fields, writing it to the speficied\nfile.\n\n## Usage:\n\nThe following call creates a file `run.ex` at location `path/to/file/run.ex`\n\n```\nAkd.Generator.Task.gen([\"run.ex\"], path: \"path/to/file\")\n```\n","module":"Elixir.Akd.Generator.Task","id":"Akd.Generator.Task"},{"type":null,"source":"lib/akd/hook.ex:2","object_type":"ModuleObject","moduledoc":"This module represents an `Akd.Hook` struct which contains metadata about\na hook.\n\nPlease refer to `Nomenclature` for more information about the terms used.\n\nThe meta data involves:\n\n* ensure - A list of `Akd.Operation.t` structs that are ran after a deployment,\n          if the hook was successfully executed (independent of whether the\n          deployment itself was successful or not), and `run_ensure` is `true`.\n* ignore_failure - If `true`, the deployment continues to happen even if this\n                  hook fails. Defauls to `false`.\n* main - A list of `Akd.Operation.t` that are ran when the hook is executed.\n* rollback - A list of `Akd.Operation.t` that are ran when a deployment is a\n            failure, but the hook was called.\n* run_ensure - If `true`, `ensure` commands are ran independent of whether\n              deployment was successful or not. Defaults to `true`.\n\nThis struct is mainly used by native hooks in `Akd`, but it can be leveraged\nto write custom hooks.\n","module":"Elixir.Akd.Hook","id":"Akd.Hook"},{"type":null,"source":"lib/akd/helpers/hook_resolver.ex:2","object_type":"ModuleObject","moduledoc":"This module defines functions which can be used to resolve hooks, given\na `hook_type` and defaults.\n\nThis module is mainly intended to be used by `Akd.DeployHelper` for resolving\nhooks that it gets from `Akd.Pipeline` DSL.\n","module":"Elixir.Akd.HookResolver","id":"Akd.HookResolver"},{"type":null,"source":"lib/akd/base/init/distillery.ex:2","object_type":"ModuleObject","moduledoc":"A native Hook module that comes shipped with Akd.\n\nThis module uses `Akd.Hook`.\n\nProvides a set of operations that run distillery's `release.init` task with\na given template (optional). These commands are ran on the `build_at`\ndestination of a deployment.\n\nEnsures to cleanup and empty the rel/ directory.\n\nDoesn't have any Rollback operations.\n\n# Options:\n\n* run_ensure: boolean. Specifies whether to a run a command or not.\n* ignore_failure: boolean. Specifies whether to continue if this hook fails.\n* cmd_env: list of tuples. Specifies the environments to provide while\n      initializing the distillery release.\n\n# Defaults:\n\n* `run_ensure`: `true`\n* `ignore_failure`: `false`\n","module":"Elixir.Akd.Init.Distillery","id":"Akd.Init.Distillery"},{"type":null,"source":"lib/akd/mix/task.ex:2","object_type":"ModuleObject","moduledoc":"This module defines a `__using__` macro which allows another module\nto behave like an Akd.Mix.Task and define functions which\nallow us to define a series of operations on a `Deployment` struct and\nexecute those operations in an organized manner.\n\nThis also comes with the access to `Akd.Pipeline` and `Akd.FormHook` DSLs.\n\nIf you would like to get started use `Akd.Mix.Gen.Task` to generate a quick\ndeploy task and you can start with that and edit it\n\n# Usage:\n\n    defmodule Mix.Tasks.Deploy do\n      use Akd.Mix.Task\n\n      pipeline :fetch do\n        hook Akd.Fetcher.Scp\n      end\n\n      pipeline :init do\n        hook Akd.Initer.Distillery\n      end\n\n      pipeline :build do\n        hook Akd.Builder.Distillery\n      end\n\n      pipeline :publish do\n        hook Akd.Start.Distillery\n        hook Akd.Publisher.Distillery\n        hook Akd.Stop.Distillery\n      end\n\n      pipeline :deploy do\n        pipe_through :fetch\n        pipe_through :init\n        pipe_through :build\n        pipe_through :publish\n      end\n\n      def run(_argv) do\n        execute :deploy, with: some_params\n      end\n    end\n","module":"Elixir.Akd.Mix.Task","id":"Akd.Mix.Task"},{"type":null,"source":"lib/akd/operation.ex:4","object_type":"ModuleObject","moduledoc":"This module represents an `Operation` struct which contains metadata about\na command/operation that can be run on a destination.\n\nPlease refer to `Nomenclature` for more information about the terms used.\n\nThe meta data involves:\n\n* cmd - Commands that are ran when an `Akd.Operation.t` struct is run.\n* cmd_envs - ENV variables that the command is run with. Represented by a list\n            of two element (strings) tuples.\n            Example: [{\"SOME_ENV\", \"1\"}, {\"OTHER_ENV\", \"2\"}]\n* destination - `Akd.Destination.t` where an operation's commands are executed.\n\nThis struct is mainly used by native hooks in `Akd`, but it can be leveraged\nto write custom hooks.\n","module":"Elixir.Akd.Operation","id":"Akd.Operation"},{"type":null,"source":"lib/akd/base/publish/cp.ex:2","object_type":"ModuleObject","moduledoc":"This module is a work in progress ..\n\nThis module connects to a given remote server through ssh and publishes a\nrelease on that server.\n","module":"Elixir.Akd.Publish.Cp","id":"Akd.Publish.Cp"},{"type":null,"source":"lib/akd/base/publish/distillery.ex:2","object_type":"ModuleObject","moduledoc":"A native Hook module that comes shipped with Akd.\n\nThis module uses `Akd.Hook`.\n\nProvides a set of operations that copies a built distillery release from\nthe `build_at` location to `publish_to` destination, and then publishes\nthe release (by uncompressing the released tar file).\n\nEnsures to remove the tar.gz file created by this build.\n\nDoesn't have any Rollback operations.\n\n# Options:\n\n* run_ensure: boolean. Specifies whether to a run a command or not.\n* ignore_failure: boolean. Specifies whether to continue if this hook fails.\n\n# Defaults:\n\n* `run_ensure`: `true`\n* `ignore_failure`: `false`\n\n","module":"Elixir.Akd.Publish.Distillery","id":"Akd.Publish.Distillery"},{"type":null,"source":"lib/akd/base/publish/scp.ex:2","object_type":"ModuleObject","moduledoc":"This module is a work in progress ..\n\nThis module connects to a given remote server through ssh and publishes a\nrelease on that server.\n","module":"Elixir.Akd.Publish.Scp","id":"Akd.Publish.Scp"},{"type":null,"source":"lib/akd/helpers/secure_connection.ex:4","object_type":"ModuleObject","moduledoc":"This module defines helper functions that are used by `Akd` to execute\na set of commands through the Secure channel, examples: ssh and scp\n","module":"Elixir.Akd.SecureConnection","id":"Akd.SecureConnection"},{"type":null,"source":"lib/akd/base/start/distillery.ex:2","object_type":"ModuleObject","moduledoc":"A native Hook module that comes shipped with Akd.\n\nThis module uses `Akd.Hook`.\n\nProvides a set of operations that can start an app built and released using\ndistillery.\n\nIf fails, it stops the started node.\n\n# Options:\n\n* run_ensure: boolean. Specifies whether to a run a command or not.\n* ignore_failure: boolean. Specifies whether to continue if this hook fails.\n\n# Defaults:\n\n* `run_ensure`: `true`\n* `ignore_failure`: `false`\n\n","module":"Elixir.Akd.Start.Distillery","id":"Akd.Start.Distillery"},{"type":null,"source":"lib/akd/base/stop/distillery.ex:2","object_type":"ModuleObject","moduledoc":"A native Hook module that comes shipped with Akd.\n\nThis module uses `Akd.Hook`.\n\nProvides a set of operations that can stop an app built and released using\ndistillery.\n\nIf fails, it restarts the stopped node.\n\n# Options:\n\n* run_ensure: boolean. Specifies whether to a run a command or not.\n* ignore_failure: boolean. Specifies whether to continue if this hook fails.\n\n# Defaults:\n\n* `run_ensure`: `true`\n* `ignore_failure`: `false`\n","module":"Elixir.Akd.Stop.Distillery","id":"Akd.Stop.Distillery"},{"type":null,"source":"lib/akd/mix/gen/hook.ex:15","object_type":"ModuleObject","moduledoc":"This task generates a hook module which can be used to run commands on\na `Akd.Deployment.t` struct.\n\nPlease refer to `Akd.Hook` for more details.\n\n## Info:\n\nmix akd.gen.hook expects only module name:\n    $ `@{tsk} HookModule`\n\nUsage:\n    $ `@{tsk} Deploy`\n\n\n","module":"Elixir.Mix.Tasks.Akd.Gen.Hook","id":"Mix.Tasks.Akd.Gen.Hook"},{"type":null,"source":"lib/akd/mix/gen/task.ex:43","object_type":"ModuleObject","moduledoc":"This task generates a mix task which can be used to deploy an app.\n\nPlease refer to `Akd.Mix.Task` for more details.\n\n## Info:\n\nmix akd.gen.task expects both module name and optional parameters:\n    $ `@{tsk} TaskModule -f FetcherModule`\n\nUsage:\n    $ `@{tsk} Deploy -f Akd.Fetcher.Git`\n\n\nOptions:\n\nOption         Alias        Description\n--------------------------------------------------------------------------\n\n--fetcher       -f      Expects a fetcher hook module.\n                        Defaults to `Akd.Fetcher.Git`.\n                        Native Fetchers include:\n                        `Akd.Fetcher.Git` and `Akd.Fetcher.Scp`\n\n--initer        -i      Expects an initer hook module.\n                        Defaults to `Akd.Initer.Distillery`.\n                        Native Fetchers include:\n                        `Akd.Fetcher.Distillery`\n\n--builder       -b      Expects a builder hook module.\n                        Defaults to `Akd.Builder.Distillery`.\n                        Native Fetchers include:\n                        `Akd.Builder.Distillery` and `Akd.Builder.Docker`\n\n--publisher     -p      Expects a publisher hook module.\n                        Defaults to `Akd.Initer.Distillery`.\n                        Native Fetchers include:\n                        `Akd.Publisher.Distillery` and `Akd.Publisher.Docker`\n\n--with_phx      -w     Generates phoenix hooks alongside base books\n\n\n","module":"Elixir.Mix.Tasks.Akd.Gen.Task","id":"Mix.Tasks.Akd.Gen.Task"},{"type":null,"source":"lib/akd/mix/sample_deploy.ex:2","object_type":"ModuleObject","moduledoc":"This task deploys an app\n","module":"Elixir.Mix.Tasks.Akd.SampleDeploy","id":"Mix.Tasks.Akd.SampleDeploy"},{"type":"def","source":"lib/akd.ex:43","signature":[],"object_type":"FunctionObject","name":"build","module_id":"Akd","id":"build/0","doc":"`:build` can be set as a runtime config\nin the `config.exs` file\n\n## Examples\nwhen no `build` config is set, if returns `Akd.Build.Distillery`\n    iex> Akd.build\n    Akd.Build.Distillery\n","arity":0},{"type":"def","source":"lib/akd.ex:96","signature":[],"object_type":"FunctionObject","name":"config","module_id":"Akd","id":"config/0","doc":"Gets configuration assocaited with the `akd` app.\n\n## Examples\nwhen no config is set, if returns []\n    iex> Akd.config\n    []\n","arity":0},{"type":"def","source":"lib/akd.ex:109","signature":[["key",[],null],["\\\\",[],[["default",[],null],null]]],"object_type":"FunctionObject","name":"config","module_id":"Akd","id":"config/2","doc":"Gets configuration set for a `key`, assocaited with the `akd` app.\n\n## Examples\nwhen no config is set for `key`, if returns `default`\n    iex> Akd.config(:random, \"default\")\n    \"default\"\n","arity":2},{"type":"def","source":"lib/akd.ex:15","signature":[],"object_type":"FunctionObject","name":"fetch","module_id":"Akd","id":"fetch/0","doc":"`:fetch` can be set as a runtime config\nin the `config.exs` file\n\n## Examples\nwhen no `fetch` config is set, if returns `Akd.Fetch.Git`\n    iex> Akd.fetch\n    Akd.Fetch.Git\n","arity":0},{"type":"def","source":"lib/akd.ex:29","signature":[],"object_type":"FunctionObject","name":"init","module_id":"Akd","id":"init/0","doc":"`:init` can be set as a runtime config\nin the `config.exs` file\n\n## Examples\nwhen no `init` config is set, if returns `Akd.Init.Distillery`\n    iex> Akd.init\n    Akd.Init.Distillery\n","arity":0},{"type":"def","source":"lib/akd.ex:56","signature":[],"object_type":"FunctionObject","name":"publish","module_id":"Akd","id":"publish/0","doc":"`:publish` can be set as a runtime config\nin the `config.exs` file\n\n## Examples\nwhen no `publish` config is set, if returns `Akd.Publish.Distillery`\n    iex> Akd.publish\n    Akd.Publish.Distillery\n","arity":0},{"type":"def","source":"lib/akd.ex:124","signature":[["value",[],null],["default",[],null]],"object_type":"FunctionObject","name":"resolve_config","module_id":"Akd","id":"resolve_config/2","doc":"`resolve_config` returns a `system` variable set up with `var_name` key\n or returns the specified `default` value. Takes in `arg` whose first element is\n an atom `:system`.\n\n## Examples\nReturns value corresponding to a system variable config or returns the `default` value:\n    iex> Akd.resolve_config({:system, \"SOME_RANDOM_CONFIG\"}, \"default\")\n    \"default\"\n","arity":2},{"type":"def","source":"lib/akd.ex:69","signature":[],"object_type":"FunctionObject","name":"start","module_id":"Akd","id":"start/0","doc":"`:start` can be set as a runtime config\nin the `config.exs` file\n\n## Examples\nwhen no `start` config is set, if returns `Akd.Start.Distillery`\n    iex> Akd.start\n    Akd.Start.Distillery\n","arity":0},{"type":"def","source":"lib/akd.ex:82","signature":[],"object_type":"FunctionObject","name":"stop","module_id":"Akd","id":"stop/0","doc":"`:stop` can be set as a runtime config\nin the `config.exs` file\n\n## Examples\nwhen no `stop` config is set, if returns `Akd.Stop.Distillery`\n    iex> Akd.stop\n    Akd.Stop.Distillery\n","arity":0},{"type":"def","source":"lib/akd/base/build/distillery.ex:30","signature":[["deployment",[],null],["opts",[],null]],"object_type":"FunctionObject","name":"get_hooks","module_id":"Akd.Build.Distillery","id":"get_hooks/2","doc":"Callback implementation for `get_hooks/2`.\n\nThis function returns a list of operations that can be used to build a release\nusing distillery on the `build_at` destination of a deployment.\n\n## Examples\n\n  iex> deployment = %Akd.Deployment{mix_env: \"prod\",\n  ...> build_at: Akd.Destination.local(\".\"),\n  ...> publish_to: Akd.Destination.local(\".\"),\n  ...> name: \"name\",\n  ...> vsn: \"0.1.1\"}\n  iex> Akd.Build.Distillery.get_hooks(deployment, [])\n  [%Akd.Hook{ensure: [%Akd.Operation{cmd: \"rm -rf ./_build/prod/rel\",\n        cmd_envs: [],\n        destination: %Akd.Destination{host: :local, path: \".\",\n         user: :current}}], ignore_failure: false,\n      main: [%Akd.Operation{cmd: \"mix deps.get \\n mix compile \\n mix release --env=prod\",\n        cmd_envs: [{\"MIX_ENV\", \"prod\"}],\n        destination: %Akd.Destination{host: :local, path: \".\",\n         user: :current}}], rollback: [], run_ensure: true}]\n\n","arity":2},{"type":"def","source":"lib/akd/base/build/docker.ex:6","signature":[["",[],"Elixir"],["",[],"Elixir"]],"object_type":"FunctionObject","name":"get_hooks","module_id":"Akd.Build.Docker","id":"get_hooks/2","doc":null,"arity":2},{"type":"def","source":"lib/akd/phx/brunch.ex:33","signature":[["deployment",[],null],["opts",[],null]],"object_type":"FunctionObject","name":"get_hooks","module_id":"Akd.Build.Phoenix.Brunch","id":"get_hooks/2","doc":"Callback implementation for `get_hooks/2`.\n\nThis function returns a list of operations that can be used to build a brunch\nrelease on the `build_at` destination of a deployment.\n\n## Examples\n\n  iex> deployment = %Akd.Deployment{mix_env: \"prod\",\n  ...> build_at: Akd.Destination.local(\".\"),\n  ...> publish_to: Akd.Destination.local(\".\"),\n  ...> name: \"name\",\n  ...> vsn: \"0.1.1\"}\n  iex> Akd.Build.Phoenix.Brunch.get_hooks(deployment, [])\n  [%Akd.Hook{ensure: [%Akd.Operation{cmd: \"rm -rf deps\", cmd_envs: [],\n        destination: %Akd.Destination{host: :local, path: \".\",\n         user: :current}}], ignore_failure: false,\n    main: [%Akd.Operation{cmd: \"mix deps.get \\n mix compile\",\n        cmd_envs: [{\"MIX_ENV\", \"prod\"}],\n        destination: %Akd.Destination{host: :local, path: \".\",\n             user: :current}},\n       %Akd.Operation{cmd: \"cd . \\n node_modules/brunch/bin/brunch build --production\",\n           cmd_envs: [],\n           destination: %Akd.Destination{host: :local, path: \".\",\n                user: :current}},\n       %Akd.Operation{cmd: \"mix phx.digest\",\n           cmd_envs: [{\"MIX_ENV\", \"prod\"}],\n           destination: %Akd.Destination{host: :local, path: \".\",\n                user: :current}}], rollback: [], run_ensure: true}]\n\n","arity":2},{"type":"def","source":"lib/akd/phx/npm.ex:30","signature":[["deployment",[],null],["opts",[],null]],"object_type":"FunctionObject","name":"get_hooks","module_id":"Akd.Build.Phoenix.Npm","id":"get_hooks/2","doc":"Callback implementation for `get_hooks/2`.\n\nThis function returns a list of operations that can be used to build a npm\nrelease on the `build_at` destination of a deployment.\n\n## Examples\n\n  iex> deployment = %Akd.Deployment{mix_env: \"prod\",\n  ...> build_at: Akd.Destination.local(\".\"),\n  ...> publish_to: Akd.Destination.local(\".\"),\n  ...> name: \"name\",\n  ...> vsn: \"0.1.1\"}\n  iex> Akd.Build.Phoenix.Npm.get_hooks(deployment, [])\n  [%Akd.Hook{ensure: [%Akd.Operation{cmd: \"cd  \\n rm -rf node_modules\",\n        cmd_envs: [],\n        destination: %Akd.Destination{host: :local, path: \".\",\n         user: :current}}], ignore_failure: false,\n      main: [%Akd.Operation{cmd: \"cd  \\n npm install\", cmd_envs: [],\n        destination: %Akd.Destination{host: :local, path: \".\",\n         user: :current}}], rollback: [], run_ensure: true}]\n\n","arity":2},{"type":"def","source":"lib/akd/helpers/deploy_helper.ex:131","signature":[["deployment",[],null],["hook",[],null]],"object_type":"FunctionObject","name":"add_hook","module_id":"Akd.DeployHelper","id":"add_hook/2","doc":"Adds a hook or hooks to deployment struct's hooks and returns the updated\nDeployment.t\n\nThis function takes in a Deployment and `hook` variable.\n\n`hook` variable can be an `Akd.Hook.t` struct or a tuple (with one element\nspecifying type of hook/module and other opts)\n\n## Examples\nWhen a deployment and a `Hook.t` is given.\n\n  iex> deployment = %Akd.Deployment{mix_env: \"prod\",\n  ...> build_at: Akd.Destination.local(\".\"),\n  ...> publish_to: Akd.Destination.local(\".\"),\n  ...> name: \"name\",\n  ...> vsn: \"0.1.1\"}\n  iex> Akd.DeployHelper.add_hook(deployment, %Akd.Hook{})\n  %Akd.Deployment{build_at: %Akd.Destination{host: :local, path: \".\",\n        user: :current},\n       hooks: [%Akd.Hook{ensure: [], ignore_failure: false, main: [],\n       rollback: [], run_ensure: true}], mix_env: \"prod\", name: \"name\",\n       publish_to: %Akd.Destination{host: :local, path: \".\",\n                    user: :current}, vsn: \"0.1.1\"}\n\n  When a deployment and a tuple is given, and the first element of tuple\n  is a `Hook.t`\n\n  iex> deployment = %Akd.Deployment{mix_env: \"prod\",\n  ...> build_at: Akd.Destination.local(\".\"),\n  ...> publish_to: Akd.Destination.local(\".\"),\n  ...> name: \"name\",\n  ...> vsn: \"0.1.1\"}\n  iex> Akd.DeployHelper.add_hook(deployment, {%Akd.Hook{}, []})\n  %Akd.Deployment{build_at: %Akd.Destination{host: :local, path: \".\",\n        user: :current},\n       hooks: [%Akd.Hook{ensure: [], ignore_failure: false, main: [],\n       rollback: [], run_ensure: true}], mix_env: \"prod\", name: \"name\",\n       publish_to: %Akd.Destination{host: :local, path: \".\",\n                    user: :current}, vsn: \"0.1.1\"}\n\n  When a deployment and a tuple is given, and the first element of tuple\n  is a type in fetchinitbuildstoppublishstart\n\n  iex> deployment = %Akd.Deployment{mix_env: \"prod\",\n  ...> build_at: Akd.Destination.local(\".\"),\n  ...> publish_to: Akd.Destination.local(\".\"),\n  ...> name: \"name\",\n  ...> vsn: \"0.1.1\"}\n  iex> Akd.DeployHelper.add_hook(deployment, {:init, []})\n  %Akd.Deployment{build_at: %Akd.Destination{host: :local, path: \".\",\n      user: :current},\n     hooks: [%Akd.Hook{ensure: [%Akd.Operation{cmd: \"rm -rf ./rel\",\n         cmd_envs: [],\n         destination: %Akd.Destination{host: :local, path: \".\",\n          user: :current}},\n        %Akd.Operation{cmd: \"rm -rf _build/prod\", cmd_envs: [],\n         destination: %Akd.Destination{host: :local, path: \".\",\n        user: :current}}], ignore_failure: false,\n        main: [%Akd.Operation{cmd: \"mix deps.get \\n mix compile\",\n        cmd_envs: [{\"MIX_ENV\", \"prod\"}],\n        destination: %Akd.Destination{host: :local, path: \".\",\n               user: :current}},\n         %Akd.Operation{cmd: \"mix deps.get \\n mix compile \\n mix release.init --name name \",\n               cmd_envs: [{\"MIX_ENV\", \"prod\"}],\n               destination: %Akd.Destination{host: :local, path: \".\",\n                user: :current}}], rollback: [], run_ensure: true}],\n                        mix_env: \"prod\", name: \"name\",\n                        publish_to: %Akd.Destination{host: :local, path: \".\",\n                                     user: :current}, vsn: \"0.1.1\"}\n\n  When a deployment and a tuple is given, and the first element of tuple\n  is a Hook Module\n\n  iex> deployment = %Akd.Deployment{mix_env: \"prod\",\n  ...> build_at: Akd.Destination.local(\".\"),\n  ...> publish_to: Akd.Destination.local(\".\"),\n  ...> name: \"name\",\n  ...> vsn: \"0.1.1\"}\n  iex> Akd.DeployHelper.add_hook(deployment, {Akd.Init.Distillery, []})\n  %Akd.Deployment{build_at: %Akd.Destination{host: :local, path: \".\",\n      user: :current},\n     hooks: [%Akd.Hook{ensure: [%Akd.Operation{cmd: \"rm -rf ./rel\",\n         cmd_envs: [],\n         destination: %Akd.Destination{host: :local, path: \".\",\n          user: :current}},\n        %Akd.Operation{cmd: \"rm -rf _build/prod\", cmd_envs: [],\n         destination: %Akd.Destination{host: :local, path: \".\",\n        user: :current}}], ignore_failure: false,\n        main: [%Akd.Operation{cmd: \"mix deps.get \\n mix compile\",\n        cmd_envs: [{\"MIX_ENV\", \"prod\"}],\n        destination: %Akd.Destination{host: :local, path: \".\",\n               user: :current}},\n         %Akd.Operation{cmd: \"mix deps.get \\n mix compile \\n mix release.init --name name \",\n               cmd_envs: [{\"MIX_ENV\", \"prod\"}],\n               destination: %Akd.Destination{host: :local, path: \".\",\n                user: :current}}], rollback: [], run_ensure: true}],\n                        mix_env: \"prod\", name: \"name\",\n                        publish_to: %Akd.Destination{host: :local, path: \".\",\n                                     user: :current}, vsn: \"0.1.1\"}\n","arity":2},{"type":"def","source":"lib/akd/helpers/deploy_helper.ex:43","signature":[["deployment",[],"Elixir"]],"object_type":"FunctionObject","name":"exec","module_id":"Akd.DeployHelper","id":"exec/1","doc":"Executes a Deployment. If there's a `failure`, it executes `rollbacks/1` for\nall the `called_hooks`.\n\nExecutes `ensure/1` for all the `called_hooks`\n\nReturns `nil`\n\n## Examples\n\n  iex> deployment = %Akd.Deployment{mix_env: \"prod\",\n  ...> build_at: Akd.Destination.local(\".\"),\n  ...> publish_to: Akd.Destination.local(\".\"),\n  ...> name: \"name\",\n  ...> vsn: \"0.1.1\"}\n  iex> Akd.DeployHelper.exec(deployment)\n  nil\n","arity":1},{"type":"defmacro","source":"lib/akd/helpers/deploy_helper.ex:12","signature":[["pipeline",[],null],["list",[],"Elixir"]],"object_type":"FunctionObject","name":"execute","module_id":"Akd.DeployHelper","id":"execute/2","doc":"This macro executes a pipeline (set of operations) defined in the current\nmodule with a set of params that can be used to initialize a `Deployment`\nstruct.\n\nReturns `nil`\n\n## Examples\n\n  iex> defmodule TestAkdDeployHelperExecute do\n  ...>   import Akd.DeployHelper\n  ...>   def pip(), do: []\n  ...>   def run() do\n  ...>     execute :pip, with: %{name: \"node\", build_at: {:local, \".\"},\n  ...>       mix_env: \"prod\", publish_to: \"user@host:~/path/to/dir\", vsn: \"0.1.0\"}\n  ...>   end\n  ...> end\n  iex> TestAkdDeployHelperExecute.run()\n  nil\n","arity":2},{"type":"def","source":"lib/akd/helpers/deploy_helper.ex:69","signature":[["params",[],null]],"object_type":"FunctionObject","name":"init_deployment","module_id":"Akd.DeployHelper","id":"init_deployment/1","doc":"Initializes a `Akd.Deployment` struct with given params and sanitizes it.\n\n## Examples\n\nWhen no hooks are given:\n\n  iex> params = %{mix_env: \"prod\",\n  ...> build_at: Akd.Destination.local(\".\"),\n  ...> publish_to: Akd.Destination.local(\".\"),\n  ...> name: \"name\",\n  ...> vsn: \"0.1.1\"}\n  iex> Akd.DeployHelper.init_deployment(params)\n  %Akd.Deployment{build_at: %Akd.Destination{host: :local, path: \".\",\n      user: :current}, hooks: [], mix_env: \"prod\", name: \"name\",\n       publish_to: %Akd.Destination{host: :local, path: \".\",\n              user: :current}, vsn: \"0.1.1\"}\n\nWhen hooks are given:\n\n  iex> params = %{mix_env: \"prod\",\n  ...> build_at: Akd.Destination.local(\".\"),\n  ...> publish_to: Akd.Destination.local(\".\"),\n  ...> name: \"name\",\n  ...> vsn: \"0.1.1\", hooks: [%Akd.Hook{}]}\n  iex> Akd.DeployHelper.init_deployment(params)\n  %Akd.Deployment{build_at: %Akd.Destination{host: :local, path: \".\",\n    user: :current}, hooks: [%Akd.Hook{}], mix_env: \"prod\", name: \"name\",\n       publish_to: %Akd.Destination{host: :local, path: \".\",\n              user: :current}, vsn: \"0.1.1\"}\n\nWhen `build_at` and `publish_to` are strings in the form: user@host:path\n\n  iex> params = %{mix_env: \"prod\",\n  ...> build_at: \"root@host:~/path\",\n  ...> publish_to: \"root@host:~/path\",\n  ...> name: \"name\",\n  ...> vsn: \"0.1.1\"}\n  iex> Akd.DeployHelper.init_deployment(params)\n  %Akd.Deployment{build_at: %Akd.Destination{host: \"host\",\n    path: \"~/path\", user: \"root\"}, hooks: [], mix_env: \"prod\",\n    name: \"name\",\n    publish_to: %Akd.Destination{host: \"host\", path: \"~/path\",\n    user: \"root\"}, vsn: \"0.1.1\"}\n\nWhen `build_at` and `publish_to` are strings, not in the form: user@host:path\n\n  iex> params = %{mix_env: \"prod\",\n  ...> build_at: \"some-random-string\",\n  ...> publish_to: \"some-random-string\",\n  ...> name: \"name\",\n  ...> vsn: \"0.1.1\"}\n  iex> Akd.DeployHelper.init_deployment(params)\n  ** (MatchError) no match of right hand side value: [\"some-random-string\"]\n\n","arity":1},{"type":"def","source":"lib/akd/destination.ex:95","signature":[["\\\\",[],[["path",[],null],"."]]],"object_type":"FunctionObject","name":"local","module_id":"Akd.Destination","id":"local/1","doc":"Takes a string path and returns a local `Akd.Destination.t` struct which\ncorresponds to locahost with the given `path`.\n\n__Alternatively one can initialize an `Akd.Destination.t` struct with just\na path, which will return a local Destination struct by default__\n\n## Examples\nWhen a path is given:\n\n    iex> Akd.Destination.local(\"/fus/ro/dah\")\n    %Akd.Destination{host: :local, path: \"/fus/ro/dah\", user: :current}\n\n","arity":1},{"type":"def","source":"lib/akd/destination.ex:67","signature":[["string",[],null]],"object_type":"FunctionObject","name":"parse","module_id":"Akd.Destination","id":"parse/1","doc":"Takes a readable string and converts it to an `Akd.Destination.t` struct.\nExpects the string to be in the following format:\n  `<user>@<host>:<path>`\nand parses it to:\n  `%Akd.Destination{user: <user>, host: <host>, path: <path>}`\n\nRaises a `MatchError` if the string isn't in the correct format.\n\n## Examples\nWhen a string with the correct format is given:\n\n    iex> Akd.Destination.parse(\"dragonborn@skyrim:whiterun\")\n    %Akd.Destination{user: \"dragonborn\", host: \"skyrim\", path: \"whiterun\"}\n\nWhen a wrongly formatted string is given:\n\n    iex> Akd.Destination.parse(\"arrowtotheknee\")\n    ** (MatchError) no match of right hand side value: [\"arrowtotheknee\"]\n\n","arity":1},{"type":"def","source":"lib/akd/destination.ex:40","signature":[["dest",[],null]],"object_type":"FunctionObject","name":"to_string","module_id":"Akd.Destination","id":"to_string/1","doc":"Takes an `Akd.Destination.t` struct, `dest` and parses it into a readable string.\n\n##  Examples\nWhen `dest` is a local destination:\n\n    iex> params = %{user: :current, host: :local, path: \"/path/to/dir\"}\n    iex> local_destination = struct!(Akd.Destination, params)\n    iex> Akd.Destination.to_string(local_destination)\n    \"/path/to/dir\"\n\n\nWhen `dest` remote destination:\n\n    iex> params = %{user: \"dragonborn\", host: \"skyrim\", path: \"whiterun\"}\n    iex> local_destination = struct!(Akd.Destination, params)\n    iex> Akd.Destination.to_string(local_destination)\n    \"dragonborn@skyrim:whiterun\"\n\n","arity":1},{"type":"def","source":"lib/akd/helpers/destination_resolver.ex:9","signature":[["dest",[],null],["deployment",[],null]],"object_type":"FunctionObject","name":"resolve","module_id":"Akd.DestinationResolver","id":"resolve/2","doc":"This function takes a `destination` variable and a `Deployment.t` struct.\n\n`destination` variable could be either a `Destination.t` struct or one of the\natoms: `:build, :publish, :local`\n\nThis function returns a resolved `Destination.t` struct.\n\n## Examples\nWhen a `Destination.t` struct is passed:\n\n  iex> destination = Akd.Destination.local()\n  iex> deployment = %Akd.Deployment{mix_env: \"prod\",\n  ...> build_at: Akd.Destination.local(\".\"),\n  ...> publish_to: Akd.Destination.local(\".\"),\n  ...> name: \"name\",\n  ...> vsn: \"0.1.1\"}\n  iex> Akd.DestinationResolver.resolve(destination, deployment)\n  %Akd.Destination{user: :current, host: :local, path: \".\"}\n\nWhen `:build` is passed:\n\n  iex> deployment = %Akd.Deployment{mix_env: \"prod\",\n  ...> build_at: Akd.Destination.local(\"build\"),\n  ...> publish_to: Akd.Destination.local(\"publish\"),\n  ...> name: \"name\",\n  ...> vsn: \"0.1.1\"}\n  iex> Akd.DestinationResolver.resolve(:build, deployment)\n  %Akd.Destination{user: :current, host: :local, path: \"build\"}\n\nWhen `:publish` is passed:\n\n  iex> deployment = %Akd.Deployment{mix_env: \"prod\",\n  ...> build_at: Akd.Destination.local(\"build\"),\n  ...> publish_to: Akd.Destination.local(\"publish\"),\n  ...> name: \"name\",\n  ...> vsn: \"0.1.1\"}\n  iex> Akd.DestinationResolver.resolve(:publish, deployment)\n  %Akd.Destination{user: :current, host: :local, path: \"publish\"}\n\nWhen `:local` is passed:\n\n  iex> deployment = %Akd.Deployment{mix_env: \"prod\",\n  ...> build_at: Akd.Destination.local(\"build\"),\n  ...> publish_to: Akd.Destination.local(\"publish\"),\n  ...> name: \"name\",\n  ...> vsn: \"0.1.1\"}\n  iex> Akd.DestinationResolver.resolve(:local, deployment)\n  %Akd.Destination{user: :current, host: :local, path: \".\"}\n","arity":2},{"type":"defmacro","source":"lib/akd/dsl/form_hook.ex:178","signature":[["cmd",[],null],["dest",[],null]],"object_type":"FunctionObject","name":"ensure","module_id":"Akd.Dsl.FormHook","id":"ensure/2","doc":"Adds an operation to the `ensure` category of a hook\n\nThese commands are the commands that are ran after all the hooks are\nexecuted. Think of these commands as cleanup commands\n\nSame as `ensure/2` but without `cmd_env`\n\n## Examples\n  ensure \"echo $GREET\", Akd.Destination.local()\n","arity":2},{"type":"defmacro","source":"lib/akd/dsl/form_hook.ex:196","signature":[["cmd",[],null],["dest",[],null],["list",[],"Elixir"]],"object_type":"FunctionObject","name":"ensure","module_id":"Akd.Dsl.FormHook","id":"ensure/3","doc":"Adds an operation to the `ensure` category of a hook\n\nThese commands are the commands that are ran after all the hooks are\nexecuted. Think of these commands as cleanup commands\n\nTakes a set of `cmd_env`, which is a list of tuples\nwhich represent the environment (system) variables\nthat will be given before the operation is executed.\n\n## Examples\n  ensure \"echo $GREET\", Akd.Destination.local(), cmd_env: [{\"GREET\", \"hello\"}]\n","arity":3},{"type":"defmacro","source":"lib/akd/dsl/form_hook.ex:46","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"form_hook","module_id":"Akd.Dsl.FormHook","id":"form_hook/1","doc":"Forms a hook with a given block.\nThis is the entry point to this DSL.\n\nSame as `form_hook/2` but without `opts`\n\n## Examples\n  form_hook do\n    main \"echo hello\", Akd.Destination.local()\n  end\n\n  iex> import Akd.Dsl.FormHook\n  iex> form_hook do\n  ...> main \"echo hello\", Akd.Destination.local()\n  ...> main \"run this cmd\", Akd.Destination.local()\n  ...> ensure \"run this too\", Akd.Destination.local()\n  ...> rollback \"roll this back\", Akd.Destination.local()\n  ...> end\n  %Akd.Hook{ensure: [%Akd.Operation{cmd: \"run this too\", cmd_envs: [],\n           destination: %Akd.Destination{host: :local, path: \".\",\n            user: :current}}], ignore_failure: false,\n       main: [%Akd.Operation{cmd: \"echo hello\", cmd_envs: [],\n                     destination: %Akd.Destination{host: :local, path: \".\",\n                                    user: :current}},\n                    %Akd.Operation{cmd: \"run this cmd\", cmd_envs: [],\n              destination: %Akd.Destination{host: :local, path: \".\",\n                             user: :current}}],\n       rollback: [%Akd.Operation{cmd: \"roll this back\", cmd_envs: [],\n                     destination: %Akd.Destination{host: :local, path: \".\",\n                                    user: :current}}], run_ensure: true}\n","arity":1},{"type":"defmacro","source":"lib/akd/dsl/form_hook.ex:94","signature":[["opts",[],null],["list",[],"Elixir"]],"object_type":"FunctionObject","name":"form_hook","module_id":"Akd.Dsl.FormHook","id":"form_hook/2","doc":"Forms a hook with a given block.\nThis is the entry point to this DSL.\n\n## Examples\n  form_hook opts, do\n    main \"echo hello\", Akd.Destination.local()\n  end\n\n  iex> import Akd.Dsl.FormHook\n  iex> form_hook ignore_failure: true, run_ensure: false do\n  ...> main \"echo hello\", Akd.Destination.local()\n  ...> main \"run this cmd\", Akd.Destination.local()\n  ...> ensure \"run this too\", Akd.Destination.local()\n  ...> rollback \"roll this back\", Akd.Destination.local()\n  ...> end\n  %Akd.Hook{ensure: [%Akd.Operation{cmd: \"run this too\", cmd_envs: [],\n       destination: %Akd.Destination{host: :local, path: \".\",\n        user: :current}}], ignore_failure: true,\n     main: [%Akd.Operation{cmd: \"echo hello\", cmd_envs: [],\n       destination: %Akd.Destination{host: :local, path: \".\",\n        user: :current}},\n      %Akd.Operation{cmd: \"run this cmd\", cmd_envs: [],\n       destination: %Akd.Destination{host: :local, path: \".\",\n        user: :current}}],\n     rollback: [%Akd.Operation{cmd: \"roll this back\", cmd_envs: [],\n       destination: %Akd.Destination{host: :local, path: \".\",\n        user: :current}}], run_ensure: false}\n","arity":2},{"type":"def","source":"lib/akd/dsl/form_hook.ex:272","signature":[["ops",[],null]],"object_type":"FunctionObject","name":"get_ops_acc","module_id":"Akd.Dsl.FormHook","id":"get_ops_acc/1","doc":"Gets list of operations from the Agent that keeps track of operations while using\nthe FormHook DSL\n","arity":1},{"type":"defmacro","source":"lib/akd/dsl/form_hook.ex:140","signature":[["cmd",[],null],["dest",[],null]],"object_type":"FunctionObject","name":"main","module_id":"Akd.Dsl.FormHook","id":"main/2","doc":"Adds an operation to the `main` category of a hook\n\nThese commands are the main commands that are ran when a hook is first\nexecuted.\n\nSame as `main/2` but without `cmd_env`\n\n## Examples\n  main \"echo hello\", Akd.Destination.local()\n","arity":2},{"type":"defmacro","source":"lib/akd/dsl/form_hook.ex:158","signature":[["cmd",[],null],["dest",[],null],["list",[],"Elixir"]],"object_type":"FunctionObject","name":"main","module_id":"Akd.Dsl.FormHook","id":"main/3","doc":"Adds an operation to the `main` category of a hook\n\nThese commands are the main commands that are ran when a hook is first\nexecuted.\n\nTakes a set of `cmd_env`, which is a list of tuples\nwhich represent the environment (system) variables\nthat will be given before the operation is executed.\n\n## Examples\n  main \"echo $GREET\", Akd.Destination.local(), cmd_env: [{\"GREET\", \"hello\"}]\n","arity":3},{"type":"def","source":"lib/akd/dsl/form_hook.ex:266","signature":[["ops",[],null],["op",[],null]],"object_type":"FunctionObject","name":"put_ops_acc","module_id":"Akd.Dsl.FormHook","id":"put_ops_acc/2","doc":"This adds an operation to the Agent that keeps track of operations while using\nthe FormHook DSL\n","arity":2},{"type":"defmacro","source":"lib/akd/dsl/form_hook.ex:216","signature":[["cmd",[],null],["dest",[],null]],"object_type":"FunctionObject","name":"rollback","module_id":"Akd.Dsl.FormHook","id":"rollback/2","doc":"Adds an operation to the `rollback` category of a hook\n\nThese commands are the commands that are ran after all the hooks are\nexecuted and if there is a failure.\n\nSame as `rollback/2` but without `cmd_env`\n\n## Examples\n  rollback \"echo $GREET\", Akd.Destination.local()\n","arity":2},{"type":"defmacro","source":"lib/akd/dsl/form_hook.ex:234","signature":[["cmd",[],null],["dest",[],null],["list",[],"Elixir"]],"object_type":"FunctionObject","name":"rollback","module_id":"Akd.Dsl.FormHook","id":"rollback/3","doc":"Adds an operation to the `rollback` category of a hook\n\nThese commands are the commands that are ran after all the hooks are\nexecuted and if there is a failure.\n\nTakes a set of `cmd_env`, which is a list of tuples\nwhich represent the environment (system) variables\nthat will be given before the operation is executed.\n\n## Examples\n  rollback \"echo $GREET\", Akd.Destination.local(), cmd_env: [{\"GREET\", \"hello\"}]\n","arity":3},{"type":"def","source":"lib/akd/dsl/form_hook.ex:254","signature":[["\\\\",[],[["ops",[],null],[]]]],"object_type":"FunctionObject","name":"start_ops_acc","module_id":"Akd.Dsl.FormHook","id":"start_ops_acc/1","doc":"This starts an Agent that keeps track of added operations while using\nthe FormHook DSL\n","arity":1},{"type":"def","source":"lib/akd/dsl/form_hook.ex:260","signature":[["ops",[],null]],"object_type":"FunctionObject","name":"stop_ops_acc","module_id":"Akd.Dsl.FormHook","id":"stop_ops_acc/1","doc":"This stops the Agent that keeps track of added operations while using\nthe FormHook DSL\n","arity":1},{"type":"def","source":"lib/akd/dsl/form_hook.ex:278","signature":[["ops",[],null],["opts",[],null]],"object_type":"FunctionObject","name":"struct_hook","module_id":"Akd.Dsl.FormHook","id":"struct_hook/2","doc":"Converts a list of operations with options to an `Akd.Hook.t` struct\n","arity":2},{"type":"def","source":"lib/akd/dsl/pipeline.ex:155","signature":[["hooks",[],null]],"object_type":"FunctionObject","name":"get_pipe","module_id":"Akd.Dsl.Pipeline","id":"get_pipe/1","doc":"This gets the hooks from the Agent keeping track of a pipeline's definition\n","arity":1},{"type":"defmacro","source":"lib/akd/dsl/pipeline.ex:93","signature":[["hook",[],null],["\\\\",[],[["opts",[],null],[]]]],"object_type":"FunctionObject","name":"hook","module_id":"Akd.Dsl.Pipeline","id":"hook/2","doc":"Adds a hook to a pipeline.\n\nThis can be called only inside a pipeline call.\n\n## Examples:\n  pipeline :pipe do\n    hook Akd.Init.Distillery, run_ensure: false\n    hook Akd.Build.Distillery\n    hook Akd.Publish.Distillery\n  end\n","arity":2},{"type":"defmacro","source":"lib/akd/dsl/pipeline.ex:113","signature":[["pipeline",[],null]],"object_type":"FunctionObject","name":"pipe_through","module_id":"Akd.Dsl.Pipeline","id":"pipe_through/1","doc":"Adds a list of hooks to a pipeline. Those list of hooks are\ndefined in the pipeline this pipes through\n\nThis can be called only inside a pipeline call.\n\n## Examples:\n  pipeline :pipe do\n    hook Akd.Init.Distillery, run_ensure: false\n    hook Akd.Build.Distillery\n    hook Akd.Publish.Distillery\n  end\n\n  pipeline :final do\n    pipe_through :pipe # This adds all the above three hooks to :final\n  end\n","arity":1},{"type":"defmacro","source":"lib/akd/dsl/pipeline.ex:50","signature":[["name",[],null],["list",[],"Elixir"]],"object_type":"FunctionObject","name":"pipeline","module_id":"Akd.Dsl.Pipeline","id":"pipeline/2","doc":"Defines a pipeline `name` with a given block.\nAlso defines a function with name `name` and arity 0.\n\nThis can be called only inside a module.\n\n## Examples:\n\n  iex> defmodule SomeMod do\n  ...>   import Akd.Dsl.Pipeline\n  ...>   pipeline :temporary do\n  ...>     hook \"this hook\"\n  ...>   end\n  ...> end\n  iex> SomeMod.temporary\n  [{\"this hook\", []}]\n\n\n  iex> defmodule SomeOtherMod do\n  ...>   import Akd.Dsl.Pipeline\n  ...>   pipeline :temporary do\n  ...>     hook \"this hook\"\n  ...>   end\n  ...>   pipeline :permanent do\n  ...>    pipe_through :temporary\n  ...>    hook \"another hook\", some_option: \"some option\"\n  ...>   end\n  ...> end\n  iex> SomeOtherMod.permanent\n  [{\"this hook\", []}, {\"another hook\", [some_option: \"some option\"]}]\n","arity":2},{"type":"def","source":"lib/akd/dsl/pipeline.ex:150","signature":[["hooks",[],null],["hook",[],null]],"object_type":"FunctionObject","name":"put_pipe","module_id":"Akd.Dsl.Pipeline","id":"put_pipe/2","doc":"This adds another hook to the Agent keeping track of a pipeline's definition\n","arity":2},{"type":"def","source":"lib/akd/dsl/pipeline.ex:138","signature":[["\\\\",[],[["hooks",[],null],[]]]],"object_type":"FunctionObject","name":"start_pipe","module_id":"Akd.Dsl.Pipeline","id":"start_pipe/1","doc":"This starts an Agent that keeps track of a pipeline's definition and\nhooks added to the pipeline.\n","arity":1},{"type":"def","source":"lib/akd/dsl/pipeline.ex:144","signature":[["hooks",[],null]],"object_type":"FunctionObject","name":"stop_pipe","module_id":"Akd.Dsl.Pipeline","id":"stop_pipe/1","doc":"This stops the Agent that keeps track of a pipeline's definition and\nhooks added to the pipeline.\n","arity":1},{"type":"def","source":"lib/akd/base/fetch/git.ex:33","signature":[["deployment",[],null],["opts",[],null]],"object_type":"FunctionObject","name":"get_hooks","module_id":"Akd.Fetch.Git","id":"get_hooks/2","doc":"Callback implementation for `get_hooks/2`.\n\nThis function returns a list of operations that can be used to fetch a source\ncode using `git` from a branch.\n\n## Examples\nWhen no `src` is given with `opts`:\n\n  iex> deployment = %Akd.Deployment{mix_env: \"prod\",\n  ...> build_at: Akd.Destination.local(\".\"),\n  ...> publish_to: Akd.Destination.local(\".\"),\n  ...> name: \"name\",\n  ...> vsn: \"0.1.1\"}\n  iex> Akd.Fetch.Git.get_hooks(deployment, [])\n  [%Akd.Hook{ensure: [%Akd.Operation{cmd: \"rm -rf ./*\", cmd_envs: [],\n        destination: %Akd.Destination{host: :local, path: \".\",\n         user: :current}},\n       %Akd.Operation{cmd: \"rm -rf ./.*\", cmd_envs: [],\n        destination: %Akd.Destination{host: :local, path: \".\",\n       user: :current}}], ignore_failure: false,\n    main: [%Akd.Operation{cmd: \"git clone . .\", cmd_envs: [],\n     destination: %Akd.Destination{host: :local, path: \".\",\n             user: :current}},\n    %Akd.Operation{cmd: \"git fetch\", cmd_envs: [],\n           destination: %Akd.Destination{host: :local, path: \".\",\n                           user: :current}},\n    %Akd.Operation{cmd: \"git checkout master\", cmd_envs: [],\n           destination: %Akd.Destination{host: :local, path: \".\",\n                           user: :current}},\n    %Akd.Operation{cmd: \"git pull\", cmd_envs: [],\n           destination: %Akd.Destination{host: :local, path: \".\",\n                           user: :current}}], rollback: [], run_ensure: false}]\n\n\nWhen a `src` is given:\n\n  iex> deployment = %Akd.Deployment{mix_env: \"prod\",\n  ...> build_at: Akd.Destination.local(\".\"),\n  ...> publish_to: Akd.Destination.local(\".\"),\n  ...> name: \"name\",\n  ...> vsn: \"0.1.1\"}\n  iex> Akd.Fetch.Git.get_hooks(deployment, [src: \"url\"])\n  [%Akd.Hook{ensure: [%Akd.Operation{cmd: \"rm -rf ./*\", cmd_envs: [],\n        destination: %Akd.Destination{host: :local, path: \".\",\n         user: :current}},\n     %Akd.Operation{cmd: \"rm -rf ./.*\", cmd_envs: [],\n          destination: %Akd.Destination{host: :local, path: \".\",\n                          user: :current}}], ignore_failure: false,\n    main: [%Akd.Operation{cmd: \"git clone . .\", cmd_envs: [],\n         destination: %Akd.Destination{host: :local, path: \".\",\n                         user: :current}},\n      %Akd.Operation{cmd: \"git fetch\", cmd_envs: [],\n           destination: %Akd.Destination{host: :local, path: \".\",\n                           user: :current}},\n      %Akd.Operation{cmd: \"git checkout master\", cmd_envs: [],\n           destination: %Akd.Destination{host: :local, path: \".\",\n                           user: :current}},\n      %Akd.Operation{cmd: \"git pull\", cmd_envs: [],\n           destination: %Akd.Destination{host: :local, path: \".\",\n                 user: :current}}], rollback: [], run_ensure: false}]\n\n","arity":2},{"type":"def","source":"lib/akd/base/fetch/scp.ex:31","signature":[["deployment",[],null],["opts",[],null]],"object_type":"FunctionObject","name":"get_hooks","module_id":"Akd.Fetch.Scp","id":"get_hooks/2","doc":"Callback implementation for `get_hooks/2`.\n\nThis function returns a list of operations that can be used to fetch source\ncode using `scp` from a given source.\n\n## Examples\n\n  iex> deployment = %Akd.Deployment{mix_env: \"prod\",\n  ...> build_at: Akd.Destination.local(),\n  ...> publish_to: Akd.Destination.local(),\n  ...> name: \"name\",\n  ...> vsn: \"0.1.1\"}\n  iex> Akd.Fetch.Scp.get_hooks(deployment, [exclude: []])\n  [%Akd.Hook{ensure: [%Akd.Operation{cmd: \"rm -rf ./*\", cmd_envs: [],\n        destination: %Akd.Destination{host: :local, path: \".\",\n         user: :current}}], ignore_failure: false,\n      main: [%Akd.Operation{cmd: \"rsync -krav -e ssh . .\", cmd_envs: [],\n        destination: %Akd.Destination{host: :local, path: \".\",\n         user: :current}}], rollback: [], run_ensure: true}]\n\n","arity":2},{"type":"def","source":"lib/akd/generator/hook.ex:26","signature":[["list",[],"Elixir"],["opts",[],null]],"object_type":"FunctionObject","name":"gen","module_id":"Akd.Generator.Hook","id":"gen/2","doc":"This is the callback implementation for `gen/2`.\n\nThis function takes in a list of inputs and a list of options and generates\na module that uses `Akd.Hook` at the specified path with the specified name.\n\nThe first element of the input is expected to be the name of the file.\n\nThe path can be sent to the `opts`.\n\nIf no path is sent, it defaults to lib/\n\n## Examples:\n\n  Akd.Generator.Hook.gen([\"hook.ex\"], [path: \"some/path\"])\n\n","arity":2},{"type":"def","source":"lib/akd/generator/task.ex:28","signature":[["list",[],"Elixir"],["opts",[],null]],"object_type":"FunctionObject","name":"gen","module_id":"Akd.Generator.Task","id":"gen/2","doc":"This is the callback implementation for `gen/2`.\n\nThis function takes in a list of inputs and a list of options and generates\na module that uses `Akd.Task` at the specified path with the specified name.\n\nThe first element of the input is expected to be the name of the file.\n\nThe path can be sent to the `opts`.\n\nIf no path is sent, it defaults to lib/\n\n## Examples:\n\n  Akd.Generator.Hook.gen([\"task.ex\"], [path: \"some/path\"])\n\n","arity":2},{"type":"defmacro","source":"lib/akd/hook.ex:41","signature":[["",[],"Elixir"]],"object_type":"FunctionObject","name":"__using__","module_id":"Akd.Hook","id":"__using__/1","doc":"This macro allows another module to behave like `Akd.Hook`.\nThis also allows a module to use `Akd.Dsl.FormHook` to write\nreadable hooks.\n\n## Examples:\n\n    iex> defmodule CustomHook do\n    ...>   use Akd.Hook\n    ...>   def get_hooks(deployment, opts) do\n    ...>     [form_hook do\n    ...>        main \"some command\", Akd.Destination.local()\n    ...>      end]\n    ...>   end\n    ...> end\n    iex> CustomHook.get_hooks(nil, nil)\n    [%Akd.Hook{ensure: [], ignore_failure: false,\n          main: [%Akd.Operation{cmd: \"some command\", cmd_envs: [],\n          destination: %Akd.Destination{host: :local, path: \".\",\n          user: :current}}], rollback: [], run_ensure: true}]\n","arity":1},{"type":"def","source":"lib/akd/hook.ex:114","signature":[["hook",[],null]],"object_type":"FunctionObject","name":"ensure","module_id":"Akd.Hook","id":"ensure/1","doc":"Takes a `Akd.Hook.t` struct and calls the list of `Akd.Operation.t`\ncorresponding to `ensure` type.\n\nIf `run_ensure` is `false`, it doesn't run any operations.\n\n## Examples:\n\n    iex> hook = %Akd.Hook{}\n    iex> Akd.Hook.ensure(hook)\n    {:ok, []}\n\n    iex> ensure = [%Akd.Operation{destination: %Akd.Destination{}, cmd: \"echo 1\"}]\n    iex> hook = %Akd.Hook{run_ensure: false, ensure: ensure}\n    iex> Akd.Hook.ensure(hook)\n    {:ok, []}\n","arity":1},{"type":"def","source":"lib/akd/hook.ex:95","signature":[["hook",[],null]],"object_type":"FunctionObject","name":"main","module_id":"Akd.Hook","id":"main/1","doc":"Takes a `Akd.Hook.t` struct and calls the list of `Akd.Operation.t`\ncorresponding to `main` type.\n\n## Examples:\n\n    iex> hook = %Akd.Hook{}\n    iex> Akd.Hook.main(hook)\n    {:ok, []}\n","arity":1},{"type":"def","source":"lib/akd/hook.ex:76","signature":[["hook",[],null]],"object_type":"FunctionObject","name":"rollback","module_id":"Akd.Hook","id":"rollback/1","doc":"Takes a `Akd.Hook.t` struct and calls the list of `Akd.Operation.t`\ncorresponding to `rollback` type.\n\n## Examples:\n\n    iex> hook = %Akd.Hook{}\n    iex> Akd.Hook.rollback(hook)\n    {:ok, []}\n","arity":1},{"type":"def","source":"lib/akd/helpers/hook_resolver.ex:18","signature":[["deployment",[],null],["opts",[],null]],"object_type":"FunctionObject","name":"build","module_id":"Akd.HookResolver","id":"build/2","doc":"Returns hooks associated with `build`.\n\nTakes in a `deployment` and `opts`. If `opts` is empty, just calls\nthe default module.\n\n## Examples\nWhen `opts` is empty:\n\n  iex> deployment = %Akd.Deployment{mix_env: \"prod\",\n  ...> build_at: Akd.Destination.local(\".\"),\n  ...> publish_to: Akd.Destination.local(\".\"),\n  ...> name: \"name\",\n  ...> vsn: \"0.1.1\"}\n  iex> hooks = Akd.build.get_hooks(deployment, [])\n  iex> Akd.HookResolver.build(deployment, []) == hooks\n  true\n","arity":2},{"type":"def","source":"lib/akd/helpers/hook_resolver.ex:18","signature":[["deployment",[],null],["opts",[],null]],"object_type":"FunctionObject","name":"fetch","module_id":"Akd.HookResolver","id":"fetch/2","doc":"Returns hooks associated with `fetch`.\n\nTakes in a `deployment` and `opts`. If `opts` is empty, just calls\nthe default module.\n\n## Examples\nWhen `opts` is empty:\n\n  iex> deployment = %Akd.Deployment{mix_env: \"prod\",\n  ...> build_at: Akd.Destination.local(\".\"),\n  ...> publish_to: Akd.Destination.local(\".\"),\n  ...> name: \"name\",\n  ...> vsn: \"0.1.1\"}\n  iex> hooks = Akd.fetch.get_hooks(deployment, [])\n  iex> Akd.HookResolver.fetch(deployment, []) == hooks\n  true\n","arity":2},{"type":"def","source":"lib/akd/helpers/hook_resolver.ex:18","signature":[["deployment",[],null],["opts",[],null]],"object_type":"FunctionObject","name":"init","module_id":"Akd.HookResolver","id":"init/2","doc":"Returns hooks associated with `init`.\n\nTakes in a `deployment` and `opts`. If `opts` is empty, just calls\nthe default module.\n\n## Examples\nWhen `opts` is empty:\n\n  iex> deployment = %Akd.Deployment{mix_env: \"prod\",\n  ...> build_at: Akd.Destination.local(\".\"),\n  ...> publish_to: Akd.Destination.local(\".\"),\n  ...> name: \"name\",\n  ...> vsn: \"0.1.1\"}\n  iex> hooks = Akd.init.get_hooks(deployment, [])\n  iex> Akd.HookResolver.init(deployment, []) == hooks\n  true\n","arity":2},{"type":"def","source":"lib/akd/helpers/hook_resolver.ex:18","signature":[["deployment",[],null],["opts",[],null]],"object_type":"FunctionObject","name":"publish","module_id":"Akd.HookResolver","id":"publish/2","doc":"Returns hooks associated with `publish`.\n\nTakes in a `deployment` and `opts`. If `opts` is empty, just calls\nthe default module.\n\n## Examples\nWhen `opts` is empty:\n\n  iex> deployment = %Akd.Deployment{mix_env: \"prod\",\n  ...> build_at: Akd.Destination.local(\".\"),\n  ...> publish_to: Akd.Destination.local(\".\"),\n  ...> name: \"name\",\n  ...> vsn: \"0.1.1\"}\n  iex> hooks = Akd.publish.get_hooks(deployment, [])\n  iex> Akd.HookResolver.publish(deployment, []) == hooks\n  true\n","arity":2},{"type":"def","source":"lib/akd/helpers/hook_resolver.ex:18","signature":[["deployment",[],null],["opts",[],null]],"object_type":"FunctionObject","name":"start","module_id":"Akd.HookResolver","id":"start/2","doc":"Returns hooks associated with `start`.\n\nTakes in a `deployment` and `opts`. If `opts` is empty, just calls\nthe default module.\n\n## Examples\nWhen `opts` is empty:\n\n  iex> deployment = %Akd.Deployment{mix_env: \"prod\",\n  ...> build_at: Akd.Destination.local(\".\"),\n  ...> publish_to: Akd.Destination.local(\".\"),\n  ...> name: \"name\",\n  ...> vsn: \"0.1.1\"}\n  iex> hooks = Akd.start.get_hooks(deployment, [])\n  iex> Akd.HookResolver.start(deployment, []) == hooks\n  true\n","arity":2},{"type":"def","source":"lib/akd/helpers/hook_resolver.ex:18","signature":[["deployment",[],null],["opts",[],null]],"object_type":"FunctionObject","name":"stop","module_id":"Akd.HookResolver","id":"stop/2","doc":"Returns hooks associated with `stop`.\n\nTakes in a `deployment` and `opts`. If `opts` is empty, just calls\nthe default module.\n\n## Examples\nWhen `opts` is empty:\n\n  iex> deployment = %Akd.Deployment{mix_env: \"prod\",\n  ...> build_at: Akd.Destination.local(\".\"),\n  ...> publish_to: Akd.Destination.local(\".\"),\n  ...> name: \"name\",\n  ...> vsn: \"0.1.1\"}\n  iex> hooks = Akd.stop.get_hooks(deployment, [])\n  iex> Akd.HookResolver.stop(deployment, []) == hooks\n  true\n","arity":2},{"type":"def","source":"lib/akd/base/init/distillery.ex:28","signature":[["deployment",[],null],["opts",[],null]],"object_type":"FunctionObject","name":"get_hooks","module_id":"Akd.Init.Distillery","id":"get_hooks/2","doc":"Callback implementation for `get_hooks/2`.\n\nThis function returns a list of operations that can be used to init a release\nusing distillery on the `build_at` destination of a deployment.\n\n## Examples\n\n  iex> deployment = %Akd.Deployment{mix_env: \"prod\",\n  ...> build_at: Akd.Destination.local(\".\"),\n  ...> publish_to: Akd.Destination.local(\".\"),\n  ...> name: \"name\",\n  ...> vsn: \"0.1.1\"}\n  iex> Akd.Init.Distillery.get_hooks(deployment, [])\n  [%Akd.Hook{ensure: [%Akd.Operation{cmd: \"rm -rf ./rel\", cmd_envs: [],\n        destination: %Akd.Destination{host: :local, path: \".\",\n         user: :current}},\n       %Akd.Operation{cmd: \"rm -rf _build/prod\", cmd_envs: [],\n        destination: %Akd.Destination{host: :local, path: \".\",\n         user: :current}}], ignore_failure: false,\n      main: [%Akd.Operation{cmd: \"mix deps.get \\n mix compile\",\n        cmd_envs: [{\"MIX_ENV\", \"prod\"}],\n        destination: %Akd.Destination{host: :local, path: \".\",\n         user: :current}},\n       %Akd.Operation{cmd: \"mix deps.get \\n mix compile \\n mix release.init --name name \",\n      cmd_envs: [{\"MIX_ENV\", \"prod\"}],\n      destination: %Akd.Destination{host: :local, path: \".\",\n           user: :current}}], rollback: [], run_ensure: true}]\n\n","arity":2},{"type":"defmacro","source":"lib/akd/mix/task.ex:49","signature":[["opts",[],"Elixir"]],"object_type":"FunctionObject","name":"__using__","module_id":"Akd.Mix.Task","id":"__using__/1","doc":"This macro allows another module to behave like `Akd.Mix.Task`.\nThis also allows a module to use `Akd.Dsl.FormHook` and `Akd.Dsl.Pipeline`\nto write a task using `Akd.Hook`s in a readable and reusable way.\n\nThis task allows us to interact with complex features of `Akd.DeployHelper` in\na very simple way.\n","arity":1},{"type":"def","source":"lib/akd/operation.ex:84","signature":[["operation",[],"Elixir"]],"object_type":"FunctionObject","name":"environmentalize_cmd","module_id":"Akd.Operation","id":"environmentalize_cmd/1","doc":"Takes an Operation and returns a string of commands with `cmd_envs` preprended\nto the `cmd` script.\n\n## Examples:\nWhen a non-empty list of environments are given:\n\n    iex> envs = [{\"NAME\", \"dragonborn\"}, {\"NOK\", \"dovahkiin\"}]\n    iex> dest = %Akd.Destination{}\n    iex> op = %Akd.Operation{cmd_envs: envs, cmd: \"thuum\", destination: dest}\n    iex> Akd.Operation.environmentalize_cmd(op)\n    \"NAME=dragonborn NOK=dovahkiin thuum\"\n\nWhen an empty list of environments are given:\n\n    iex> dest = %Akd.Destination{}\n    iex> op = %Akd.Operation{cmd_envs: [], cmd: \"thuum\", destination: dest}\n    iex> Akd.Operation.environmentalize_cmd(op)\n    \" thuum\"\n\n","arity":1},{"type":"def","source":"lib/akd/operation.ex:42","signature":[["operation",[],null]],"object_type":"FunctionObject","name":"run","module_id":"Akd.Operation","id":"run/1","doc":"Runs a given `Operation.t` command on it's destination.\nIf the destination is local, it just runs it on the local machine.\nIf the destination is remote, it runs it through SSH.\n\n## Exmaples:\nWhen the destination is local\n\n    iex> envs = [{\"AKDNAME\", \"dragonborn\"}]\n    iex> dest = %Akd.Destination{}\n    iex> cmd = \"echo $AKDNAME\"\n    iex> op = %Akd.Operation{cmd_envs: envs, cmd: cmd, destination: dest}\n    iex> Akd.Operation.run(op)\n    {:ok, %IO.Stream{device: :standard_io, line_or_bytes: :line, raw: false}}\n\nWhen the destination is remote\n\n    iex> envs = [{\"AKDNAME\", \"dragonborn\"}]\n    iex> dest = %Akd.Destination{user: \"dovahkiin\", host: \"skyrim\"}\n    iex> cmd = \"echo $AKDNAME\"\n    iex> op = %Akd.Operation{cmd_envs: envs, cmd: cmd, destination: dest}\n    iex> Akd.Operation.run(op)\n    {:error, %IO.Stream{device: :standard_io, line_or_bytes: :line, raw: false}}\n\n","arity":1},{"type":"def","source":"lib/akd/base/publish/cp.ex:9","signature":[["",[],"Elixir"],["",[],"Elixir"]],"object_type":"FunctionObject","name":"get_hooks","module_id":"Akd.Publish.Cp","id":"get_hooks/2","doc":null,"arity":2},{"type":"def","source":"lib/akd/base/publish/distillery.ex:27","signature":[["deployment",[],null],["opts",[],null]],"object_type":"FunctionObject","name":"get_hooks","module_id":"Akd.Publish.Distillery","id":"get_hooks/2","doc":"Callback implementation for `get_hooks/2`.\n\nThis function returns a list of operations that can be used to publish a release\nusing distillery on the `publish_to` destination of a deployment.\n\n## Examples\n\n  iex> deployment = %Akd.Deployment{mix_env: \"prod\",\n  ...> build_at: Akd.Destination.local(\".\"),\n  ...> publish_to: Akd.Destination.local(\".\"),\n  ...> name: \"name\",\n  ...> vsn: \"0.1.1\"}\n  iex> Akd.Publish.Distillery.get_hooks(deployment, [])\n  [%Akd.Hook{ensure: [%Akd.Operation{cmd: \"rm  ./name.tar.gz\",\n        cmd_envs: [],\n        destination: %Akd.Destination{host: :local, path: \".\",\n         user: :current}}], ignore_failure: false,\n      main: [%Akd.Operation{cmd: \"cp ./_build/prod/rel/name/releases/0.1.1/name.tar.gz .\\n\",\n        cmd_envs: [],\n        destination: %Akd.Destination{host: :local, path: \".\",\n         user: :current}}], rollback: [], run_ensure: true},\n     %Akd.Hook{ensure: [], ignore_failure: false,\n      main: [%Akd.Operation{cmd: \"cd .\\ntar xzf name.tar.gz\\n\",\n        cmd_envs: [],\n      destination: %Akd.Destination{host: :local, path: \".\",\n           user: :current}}], rollback: [], run_ensure: true}]\n\n","arity":2},{"type":"def","source":"lib/akd/base/publish/scp.ex:9","signature":[["",[],"Elixir"],["",[],"Elixir"]],"object_type":"FunctionObject","name":"get_hooks","module_id":"Akd.Publish.Scp","id":"get_hooks/2","doc":null,"arity":2},{"type":"def","source":"lib/akd/helpers/secure_connection.ex:46","signature":[["src",[],null],["dest",[],null],["\\\\",[],[["opts",[],null],[]]]],"object_type":"FunctionObject","name":"scp","module_id":"Akd.SecureConnection","id":"scp/3","doc":"Takes a source and a destination and copies src to destination\n\n## Examples\n\n  iex> src = \"user@host:~/path\"\n  iex> dest = \"user2@host2:~/path2\"\n  iex> Akd.SecureConnection.scp(src, dest)\n  {:error, %IO.Stream{device: :standard_io, line_or_bytes: :line, raw: false}}\n\n  iex> src = \"user@host:~/path\"\n  iex> dest = \"user2@host2:~/path2\"\n  iex> Akd.SecureConnection.scp(src, dest, [\"-p a\"])\n  {:error, %IO.Stream{device: :standard_io, line_or_bytes: :line, raw: false}}\n","arity":3},{"type":"def","source":"lib/akd/helpers/secure_connection.ex:9","signature":[["dest",[],null],["cmds",[],null]],"object_type":"FunctionObject","name":"securecmd","module_id":"Akd.SecureConnection","id":"securecmd/2","doc":"Takes a destination and commands and runs those commands on that destination.\n\n## Examples\n\n  iex> Akd.SecureConnection.securecmd(Akd.Destination.local(), \"echo hi\")\n  {:error, %IO.Stream{device: :standard_io, line_or_bytes: :line, raw: false}}\n","arity":2},{"type":"def","source":"lib/akd/helpers/secure_connection.ex:22","signature":[["user",[],null],["scoped_ip",[],null],["operations",[],null],["\\\\",[],[["stdio",[],null],false]]],"object_type":"FunctionObject","name":"ssh","module_id":"Akd.SecureConnection","id":"ssh/4","doc":"Takes a user, host and a string of operations and runs those operations\non that host\n\n## Examples\n\n  iex> Akd.SecureConnection.ssh(:current, :local, \"echo hi\")\n  {:error, \"\"}\n\n  iex> Akd.SecureConnection.ssh(:current, :local, \"echo hi\", true)\n  {:error, %IO.Stream{device: :standard_io, line_or_bytes: :line, raw: false}}\n","arity":4},{"type":"def","source":"lib/akd/base/start/distillery.ex:24","signature":[["deployment",[],null],["opts",[],null]],"object_type":"FunctionObject","name":"get_hooks","module_id":"Akd.Start.Distillery","id":"get_hooks/2","doc":"Callback implementation for `get_hooks/2`.\n\nThis function returns a list of operations that can be used to start an app\nbuilt by distillery on the `publish_to` destination of a deployment.\n\n## Examples\n\n  iex> deployment = %Akd.Deployment{mix_env: \"prod\",\n  ...> build_at: Akd.Destination.local(\".\"),\n  ...> publish_to: Akd.Destination.local(\".\"),\n  ...> name: \"name\",\n  ...> vsn: \"0.1.1\"}\n  iex> Akd.Start.Distillery.get_hooks(deployment, [])\n  [%Akd.Hook{ensure: [], ignore_failure: false,\n      main: [%Akd.Operation{cmd: \"bin/name start\", cmd_envs: [],\n        destination: %Akd.Destination{host: :local, path: \".\",\n         user: :current}}],\n      rollback: [%Akd.Operation{cmd: \"bin/name stop\", cmd_envs: [],\n        destination: %Akd.Destination{host: :local, path: \".\",\n         user: :current}}], run_ensure: true}]\n\n","arity":2},{"type":"def","source":"lib/akd/base/stop/distillery.ex:23","signature":[["deployment",[],null],["opts",[],null]],"object_type":"FunctionObject","name":"get_hooks","module_id":"Akd.Stop.Distillery","id":"get_hooks/2","doc":"Callback implementation for `get_hooks/2`.\n\nThis function returns a list of operations that can be used to stop an app\nbuilt by distillery on the `publish_to` destination of a deployment.\n\n## Examples\n\n  iex> deployment = %Akd.Deployment{mix_env: \"prod\",\n  ...> build_at: Akd.Destination.local(\".\"),\n  ...> publish_to: Akd.Destination.local(\".\"),\n  ...> name: \"name\",\n  ...> vsn: \"0.1.1\"}\n  iex> Akd.Stop.Distillery.get_hooks(deployment, [])\n  [%Akd.Hook{ensure: [], ignore_failure: false,\n      main: [%Akd.Operation{cmd: \"bin/name stop\", cmd_envs: [],\n        destination: %Akd.Destination{host: :local, path: \".\",\n       user: :current}}],\n     rollback: [%Akd.Operation{cmd: \"bin/name start\", cmd_envs: [],\n       destination: %Akd.Destination{host: :local, path: \".\",\n        user: :current}}], run_ensure: true}]\n\n","arity":2},{"type":"def","source":"lib/akd/mix/gen/hook.ex:40","signature":[["args",[],null]],"object_type":"FunctionObject","name":"run","module_id":"Mix.Tasks.Akd.Gen.Hook","id":"run/1","doc":"Runs the mix hook to generate the hook module.\n","arity":1},{"type":"def","source":"lib/akd/mix/gen/task.ex:67","signature":[["args",[],null]],"object_type":"FunctionObject","name":"run","module_id":"Mix.Tasks.Akd.Gen.Task","id":"run/1","doc":"Runs the mix task to generate the task module.\n","arity":1},{"type":"def","source":"lib/akd/mix/sample_deploy.ex:36","signature":[],"object_type":"FunctionObject","name":"build","module_id":"Mix.Tasks.Akd.SampleDeploy","id":"build/0","doc":null,"arity":0},{"type":"def","source":"lib/akd/mix/sample_deploy.ex:46","signature":[],"object_type":"FunctionObject","name":"deploy","module_id":"Mix.Tasks.Akd.SampleDeploy","id":"deploy/0","doc":null,"arity":0},{"type":"def","source":"lib/akd/mix/sample_deploy.ex:28","signature":[],"object_type":"FunctionObject","name":"fetch","module_id":"Mix.Tasks.Akd.SampleDeploy","id":"fetch/0","doc":null,"arity":0},{"type":"def","source":"lib/akd/mix/sample_deploy.ex:32","signature":[],"object_type":"FunctionObject","name":"init","module_id":"Mix.Tasks.Akd.SampleDeploy","id":"init/0","doc":null,"arity":0},{"type":"def","source":"lib/akd/mix/sample_deploy.ex:40","signature":[],"object_type":"FunctionObject","name":"publish","module_id":"Mix.Tasks.Akd.SampleDeploy","id":"publish/0","doc":null,"arity":0},{"type":"def","source":"lib/akd/mix/sample_deploy.ex:23","signature":[["argv",[],null]],"object_type":"FunctionObject","name":"run","module_id":"Mix.Tasks.Akd.SampleDeploy","id":"run/1","doc":false,"arity":1}],"language":"elixir","git_repo_url":"https://github.com/annkissam/akd.git","client_version":"0.5.6","client_name":"inch_ex","branch_name":"v0.2","args":[]}